// SemVer - Semantic Versioning(유의적 버전)

// 노드에서는 배포를 할 때 항상 버전을 올려야 함

// 노드 패키지들의 버젼은 모두 3자리로 이루어져 있다.

// __.__.__

// 첫 번째 자리(major)
// Major는 하위 버전과 호환되지 않은 수정 사항이 생겼을 때 올림
// 0: 초기 개발 중, 1이상: 정식 버젼
// 메이저 버전은 하위 호환이 안 될 정도로 패키지의 내용이 수정되었을 때 올린다. 
// 예를 들어 1.5.0에서 2.0.0으로 올렸다는 것은, 1.5.0 버전 패키지를 사용하고 있던 사람들이 2.0.0으로 업데이트했을 때 에러가 발생할 확률이 크다는 뜻

// 두 번째 자리(minor)
// Minor는 하위 버전과 호환되는 수정 사항이 생겼을 때 올림
// 마이너 버전은 하위 호환이 되는 기능 업데이트를 할 때 올린다. 
// 버전을 1.5.0에서 1.6.0으로 올렸다면, 1.5.0 사용자가 1.6.0으로 업데이트했을 때 아무 문제가 없어야 한다.

// 세 번째 자리(patch)
// 새로운 기능이 추가되었다기보다는 기존 기능에 문제가 있어 수정한 것을 내놓았을 때 패치 버전을 올린다. 
// 업데이트 후 아무 문제가 없어야 한다.
// Patch는 기능에 버그를 해결했을 때 올림

// $ 기호들
// ^ : 마이너 버전까지만 설치하거나 업데이트. 
// npm i express@^ 1.1.1이라면 1.1.1 이상부터 2.0.0 미만 버전까지 설치. 2.0.0은 설치되지 않는다. 1.x.x와 같이 표현할 수도 있다.

// ~ : 패치 버전까지만 설치하거나 업데이트. 
// npm i express@~1.1.1이라면 1.1.1 이상부터 1.2.0 미만 버전까지 설치. 1.1.x와 같은 표현도 가능. 
// ~보다 ^이 많이 사용되는 이유는 마이너 버전까지는 하위 호환이 보장되기 때문이다.

// >, <, > =, < =, = : 초과, 미만, 이상, 이하, 동일
// npm i express@>1.1.1처럼 사용. 반드시 1.1.1 버전보다 높은 버전이 설치된다.

// 추가적으로 @latest도 사용하는데, 안정된 최신 버전의 패키지를 설치한다. x로도 표현할 수 있습니다(예: npm i express@latest 또는 npm i express@x).
// @next를 사용하면 가장 최근 배포판을 사용할 수 있습니다. 
// @latest와 다른 점은 안정되지 않은 알파나 베타 버전의 패키지를 설치할 수 있다는 것입니다. 
// 알파나 베타 버전은 1.1.1-alpha.0나 2.0.0-beta.1처럼 표시합니다. 출시 직전의 패키지에는 2.0.0-rc.0처럼 rc(Release Candidate)가 붙는 경우도 있다.