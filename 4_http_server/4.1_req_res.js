// 1.요청: 클라이언트 -> 서버
// 2.응답: 서버 -> 클라이언트

// 서버: 요청을 받는 부분 / 응답을 보내는 부분

// 요청과 응답 : 이벤트 방식
// 클라이언트로부터 요청이 왔을 때 어떤 작업을 수행할지 이벤트 리스너를 미리 등록시켜야 함

const http = require('http');

http.createServer((req, res) => {
  // 여기에 어떻게 응답할지 적어줍니다
  res.writeHead(200, { 'Content-Type': 'text/html; charset=utf-8' });
  res.write('<h1>Hello Node!</h1>');
  res.end('<p>Hello Server!</p>');
})
.listen(8080, () => { // 서버 연결
    console.log('8080번 포트에서 서버 대기 중입니다!');
    // localhost:8080 접속 (127.0.0.1:8080) 현재 컴퓨터의 내부 주소
});

// createServer 메서드 뒤에 listen 메서드를 붙이고 클라이언트에 공개할 포트 번호와 포트 연결 완료 후 실행될 콜백 함수를 넣습니다. 
// 이제 이 파일을 실행하면 서버는 8080번 포트에서 요청이 오기를 기다립니다.

// res.writeHead는 응답에 대한 정보를 기록하는 메서드 (헤더에 기록된다) 
// 첫 번째 인수: 성공적인 요청임을 의미하는 200, 두 번째 인수: 응답에 대한 정보
// res.write 메서드의 첫 번째 인수는 클라이언트로 보낼 데이터 (본문에 기록된다)
// res.end는 응답을 종료하는 메서드
// 응답이 종료되면 브라우저는 응답내용을 받아서 렌더링한다.

// 포트: 서버 내에서 프로세스를 구분하는 번호
// 서버가 하는 다양한 일: HTTP 요청 대기 / 데이터베이스와 통신 / FTP 요청 처리 등 -> 프로세스에 포트를 다르게 할당 -> 요청들을 구분
// ex) 21(FTP), 80(HTTP), 443(HTTPS), 3306(MYSQL)

// 생략 가능한 포트 번호
// http: 80, https: 443

