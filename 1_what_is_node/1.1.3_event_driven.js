// 이벤트 기반 (event-driven)
// => 이벤트가 발생할 때 미리 지정해둔 작업을 수행하는 방식을 의미

// 특정 이벤트가 발생할 때 무엇을 할지 미리 등록해두어야 함 
// == 이벤트 리스너에 콜백함수를 등록하는 것

// 이벤트 루프(event loop)
// 여러 이벤트가 동시에 발생했을 때 어떤 순서로 콜백 함수를 호출할지를 이벤트 루프가 판단

function first() {
    second();
    console.log('첫 번째');
}
function second() {
    third();
    console.log('두 번째');
}
function third() {
    console.log('세 번째');
}
first();
  
// 세 번째
// 두 번째
// 첫 번째

// 노드는 자바스크립트 코드의 맨 위부터 한 줄씩 실행한다. 
// 함수 호출 부분을 발견했다면 호출한 함수를 호출 스택(call stack)에 넣는다

// anonymous
// anonymous 함수는 처음 실행 시의 전역 콘텍스트(global context)를 의미한다. 
// 콘텍스트는 함수가 호출되었을 때 생성되는 환경을 의미합니다. 
// 자바스크립트 코드는 실행 시 기본적으로 전역 콘텍스트 안에서 돌아간다고 생각하는 게 좋다.

function run() { 
    console.log('0초 후 실행');
}

console.log('시작');
setTimeout(run, 0000);
console.log('끝');
  
//시작
// 끝
// 0초 후 실행

// - 이벤트 루프: 
//  이벤트 발생 시 호출할 콜백 함수들을 관리하고, 호출된 콜백 함수의 실행 순서를 결정하는 역할을 담당합니다. 
//  노드가 종료될 때까지 이벤트 처리를 위한 작업을 반복하므로 루프(loop)라고 부릅니다.

// - 백그라운드: 
//  setTimeout 같은 타이머나 이벤트 리스너들이 대기하는 곳입니다. 
//  자바스크립트가 아닌 다른 언어로 작성된 프로그램이라고 봐도 무방하며, 여러 작업이 동시에 실행될 수 있습니다.

// - 태스크 큐: 이벤트 발생 후, 백그라운드에서는 태스크 큐로 타이머나 이벤트 리스너의 콜백 함수를 보냅니다. 
//  정해진 순서대로 콜백들이 줄을 서 있으므로 콜백 큐라고도 합니다. 콜백들은 보통 완료된 순서대로 줄을 서 있지만, 특정한 경우 순서가 바뀌기도 합니다.

