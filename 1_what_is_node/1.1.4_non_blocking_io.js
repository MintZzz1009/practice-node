// 동기 - 동시에 실행 가능
// 비동기 - 동시에 실행 불가

// 자바스크립트 코드는 기본적으로 동시에 실행이 불가하다
// 하지만 자바스크립트상에서 돌아가는 것이 아닌 I/O 작업 같은 경우 동시에 처리될 수 있다.

// I/O는 입력(Input)/출력(Output)을 의미한다. 
// 파일 시스템 접근(파일 읽기 및 쓰기, 폴더 만들기 등)이나 네트워크를 통한 요청 같은 작업이 I/O의 일종

// 이러한 작업을 할 때, 노드는 non-blocking 방식으로 처리한다.

// 논블로킹(non-blocking)이란 이전 작업이 완료될 때까지 대기하지 않고 다음 작업을 수행하는 것을 의미합니다.
// 반대로 블로킹(blocking)은 이전 작업이 끝나야만 다음 작업을 수행하는 것을 의미합니다.

// 노드는 I/O 작업을 백그라운드로 넘겨 동시에 처리하곤 한다 => 자바스크립트상이 아닌 백그라운드에서 작업시 non-blocking
// 따라서 동시에 처리될 수 있는 작업들은 최대한 묶어서 백그라운드로 넘겨야 시간을 절약할 수 있다.

// blocking 방식의 코드
function longRunningTask() {
    // 오래 걸리는 작업
    console.log('작업 끝');
}
  
console.log('시작');
longRunningTask();
console.log('다음 작업');

// 시작
// 작업 끝
// 다음 작업


// setTimeout 활용 코드 - setTimeout(콜백, 0)은 코드를 논블로킹으로 만들기 위해 사용하는 기법 중 하나(3.4.3절의 setImmediate 참조)
function longRunningTask() {
    // 오래 걸리는 작업
    console.log('작업 끝');
}

console.log('시작');
setTimeout(longRunningTask, 0);
console.log('다음 작업');
  
// 시작
// 다음 작업
// 작업 끝

// 하지만 non-blocking 방식으로 코딩한다고 해도 우리가 작성한 코드는 동시에 실행되는 것은 아니기 때문에
// 전체 소요시간이 짧아지지는 않는다.

// 동시성은 동시 처리가 가능한 작업을 논블로킹 처리해야 얻을 수 있는 것

